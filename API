#leagues 
connection = http.client.HTTPConnection('api.football-data.org')
headers = { 'X-Auth-Token': '1f39c6d5a29947f282f44dfd0aa460f5' }
connection.request('GET', '/v2/competitions', None, headers)
response = json.loads(connection.getresponse().read().decode())

#teams
 for x in response['competitions']:
    if (x['plan'] == 'TIER_ONE' and x['id'] not in [2000, 2001]):
        connection.request('GET', '/v2/competitions/' + x['code'] + '/teams', None, headers)
        teams = json.loads(connection.getresponse().read().decode())
        for i in teams['teams']:
                output = Team(id= i['id'], name =i['name'], division_id = x['id'], league_slug = slugify(x['name']), slug=slugify(i['name']))
                output.save()
        count = League.objects.get(id=teams['competition']['id'])
        count.count = teams['count']
        count.save()

#standings
for x in response['competitions']:
        if (x['plan'] == 'TIER_ONE' and x['id'] not in [2000, 2001]):
            connection.request('GET', '/v2/competitions/' + x['code'] + '/standings', None, headers)
            standings = json.loads(connection.getresponse().read().decode())
            for j in standings['standings'][0]['table']:
                team = Team.objects.get(id = j['team']['id'])
                team.position = j['position']
                team.save()



#matches
     for x in response['competitions']:
        if (x['plan'] == 'TIER_ONE' and x['id'] not in [2000, 2001]):
            connection.request('GET', '/v2/competitions/' + x['code'] + '/matches', None, headers)
            matches= json.loads(connection.getresponse().read().decode())
            for i in matches['matches']:
                played = False
                if i['status'] == 'FINISHED':
                    played = True
                output = Match(id= i['id'], date = parse(i['utcDate']).date(), home_goals =i['score']['fullTime']['homeTeam'], away_goals =i['score']['fullTime']['awayTeam'], home_goals_fh =i['score']['halfTime']['homeTeam'], away_goals_fh=i['score']['halfTime']['awayTeam'], home_possession = 50, home_shots_target =0, away_shots_target = 0, is_played = played, away_team_id = i['awayTeam']['id'], home_team_id = i['homeTeam']['id'], time = parse(i['utcDate']).time(), league_slug = slugify(matches['competition']['name']), slug=slugify(i['homeTeam']['name'] + 'v' + i['awayTeam']['name']), matchday = i['matchday'] )
                output.save()